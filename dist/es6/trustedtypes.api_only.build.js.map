{"version":3,"sources":["src/utils/eventHandlers.js","src/trustedtypes.js","src/enforcer.js"],"names":["unsafeAttributeEventHandlers","getUnsafeAttributeEventHandlers","window","eventHandlers","name","HTMLElement","prototype","slice","push","isBrowser","rejectInputFn","TypeError","rejectInputDefaultPolicyFn","toLowerCase","toUpperCase","String","TrustedTypePolicy","TrustedTypePolicyFactory","trustedTypes","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","isTrustedTypeChecker","type","has","wrapPolicy","policyName","innerPolicy","creator","Ctor","methodName","method","DEFAULT_POLICY_NAME","policySpecificType","creatorSymbol","s","args","result","allowedValue","o","factory","policy","createTypeMapping","writable","configurable","enumerable","getTypeInternal_","tag","container","elNs","attrNs","canonicalTag","apply","ns","HTML_NS","map","hasOwnProperty","TYPE_MAP","getDefaultPolicy","defaultPolicy","assign","Object","forEach","Array","Symbol","WeakMap","policyNames","allowedNames","allowDuplicateNames","enforceNameRestrictions","TrustedType","TrustedScriptURL","TrustedHTML","TrustedScript","emptyHTML","emptyScript","SVG_NS","ATTR_PROPERTY_MAP","HTMLIFrameElement","keys","attr","createFunctionAllowed","api","createPolicy","match","indexOf","call","console","warn","wrappedPolicy","isHTML","isScriptURL","isScript","getAttributeType","tagName","attribute","elementNs","attributeNs","canonicalAttr","getPropertyType","property","getTypeMapping","namespaceUri","document","documentElement","namespaceURI","e","JSON","parse","stringify","setPolicyNameRestrictions","allowedPolicyNames","allowDuplicates","length","el","clearPolicyNameRestrictions","resetDefaultPolicy","splice","Reflect","Element","typeMap","TrustedTypes","STRING_TO_TYPE","attrs","k","entries"],"mappings":"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","file":"trustedtypes.api_only.build.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n// TODO check attributes in safari, remove legacy safe handlers\nconst unsafeAttributeEventHandlers = [\n  'onabort',\n  'onactivate',\n  'onactivateinvisible',\n  'onafterprint',\n  'onafterupdate',\n  'onanimationcancel',\n  'onanimationend',\n  'onanimationiteration',\n  'onanimationstart',\n  'onariarequest',\n  'onauxclick',\n  'onbeforeactivate',\n  'onbeforecopy',\n  'onbeforecut',\n  'onbeforedeactivate',\n  'onbeforeeditfocus',\n  'onbeforepaste',\n  'onbeforeprint',\n  'onbeforeunload',\n  'onbegin',\n  'onblur',\n  'onbounce',\n  'oncancel',\n  'oncanplay',\n  'oncanplaythrough',\n  'oncellchange',\n  'onchange',\n  'onclick',\n  'onclose',\n  'oncommand',\n  'oncontextmenu',\n  'oncontrolselect',\n  'oncopy',\n  'oncuechange',\n  'oncut',\n  'ondataavailable',\n  'ondatasetchanged',\n  'ondatasetcomplete',\n  'ondblclick',\n  'ondeactivate',\n  'ondrag',\n  'ondragdrop',\n  'ondragend',\n  'ondragenter',\n  'ondragexit',\n  'ondragleave',\n  'ondragover',\n  'ondragstart',\n  'ondrop',\n  'ondurationchange',\n  'onemptied',\n  'onend',\n  'onended',\n  'onerror',\n  'onerrorupdate',\n  'onexit',\n  'onfilterchange',\n  'onfinish',\n  'onfocus',\n  'onfocusin',\n  'onfocusout',\n  'onformdata',\n  'onfullscreenchange',\n  'onfullscreenerror',\n  'ongotpointercapture',\n  'onhelp',\n  'oninput',\n  'oninvalid',\n  'onkeydown',\n  'onkeypress',\n  'onkeyup',\n  'onlayoutcomplete',\n  'onload',\n  'onloadeddata',\n  'onloadedmetadata',\n  'onloadend',\n  'onloadstart',\n  'onlosecapture',\n  'onlostpointercapture',\n  'onmediacomplete',\n  'onmediaerror',\n  'onmessage',\n  'onmousedown',\n  'onmouseenter',\n  'onmouseleave',\n  'onmousemove',\n  'onmouseout',\n  'onmouseover',\n  'onmouseup',\n  'onmousewheel',\n  'onmove',\n  'onmoveend',\n  'onmovestart',\n  'onmozfullscreenchange',\n  'onmozfullscreenerror',\n  'onmscontentzoom',\n  'onmsgesturechange',\n  'onmsgesturedoubletap',\n  'onmsgestureend',\n  'onmsgesturehold',\n  'onmsgesturestart',\n  'onmsgesturetap',\n  'onmsgotpointercapture',\n  'onmsinertiastart',\n  'onmslostpointercapture',\n  'onmsmanipulationstatechanged',\n  'onmspointercancel',\n  'onmspointerdown',\n  'onmspointerenter',\n  'onmspointerleave',\n  'onmspointermove',\n  'onmspointerout',\n  'onmspointerover',\n  'onmspointerup',\n  'onoffline',\n  'ononline',\n  'onoutofsync',\n  'onoverscroll',\n  'onpaste',\n  'onpause',\n  'onplay',\n  'onplaying',\n  'onpointercancel',\n  'onpointerdown',\n  'onpointerenter',\n  'onpointerleave',\n  'onpointermove',\n  'onpointerout',\n  'onpointerover',\n  'onpointerrawupdate',\n  'onpointerup',\n  'onprogress',\n  'onpropertychange',\n  'onratechange',\n  'onreadystatechange',\n  'onrepeat',\n  'onreset',\n  'onresize',\n  'onresizeend',\n  'onresizestart',\n  'onresume',\n  'onreverse',\n  'onrowdelete',\n  'onrowenter',\n  'onrowexit',\n  'onrowinserted',\n  'onscroll',\n  'onscrollend',\n  'onsearch',\n  'onseek',\n  'onseeked',\n  'onseeking',\n  'onselect',\n  'onselectionchange',\n  'onselectstart',\n  'onshow',\n  'onstalled',\n  'onstart',\n  'onstop',\n  'onstorage',\n  'onsubmit',\n  'onsuspend',\n  'onsynchrestored',\n  'ontimeerror',\n  'ontimeupdate',\n  'ontoggle',\n  'ontrackchange',\n  'ontransitioncancel',\n  'ontransitionend',\n  'ontransitionrun',\n  'ontransitionstart',\n  'onunload',\n  'onurlflip',\n  'onvolumechange',\n  'onwaiting',\n  'onwebkitanimationend',\n  'onwebkitanimationiteration',\n  'onwebkitanimationstart',\n  'onwebkitfullscreenchange',\n  'onwebkitfullscreenerror',\n  'onwebkittransitionend',\n  'onwheel',\n];\n\n/**\n * Returns an array of all event handlers. Some of the event handlers may be\n * supported only in some browsers.\n *\n * For every event type that the browser supports, SVG supports that as an event\n * attribute, following the same requirements as for HTML event attributes.\n * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/Events\n *\n * @return {!Array<string>}\n */\nexport function getUnsafeAttributeEventHandlers() {\n  if (typeof window !== 'undefined') {\n    const eventHandlers = [];\n    for (const name in HTMLElement.prototype) {\n      if (name.slice(0, 2) === 'on') {\n        eventHandlers.push(name);\n      }\n    }\n    return eventHandlers;\n  } else {\n    return unsafeAttributeEventHandlers;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nimport {getUnsafeAttributeEventHandlers} from './utils/eventHandlers.js';\n\nconst isBrowser = typeof window !== 'undefined';\n\nconst rejectInputFn = (s) => {\n  throw new TypeError('undefined conversion');\n};\n\nconst rejectInputDefaultPolicyFn = (s) => null;\n\nconst {toLowerCase, toUpperCase} = String.prototype;\n\nexport const HTML_NS = 'http://www.w3.org/1999/xhtml';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\n\n/**\n * @constructor\n * @property {!function(string):TrustedHTML} createHTML\n * @property {!function(string):TrustedScriptURL} createScriptURL\n * @property {!function(string):TrustedScript} createScript\n * @property {!string} name\n */\nexport const TrustedTypePolicy = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/**\n * @constructor\n */\nexport const TrustedTypePolicyFactory = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n */\nconst TrustedTypesInnerPolicy = {};\n\n/**\n * @typedef {!Object<string, {\n *   attributes: !Object<string, string>,\n *   properties: !Object<string, string>}>}\n */\nconst TrustedTypesTypeMap = {};\n/* eslint-enable no-unused-vars */\n\nexport const DEFAULT_POLICY_NAME = 'default';\n\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    assign, create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {hasOwnProperty} = ObjectPrototype;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (const key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Allowed policy names.\n   * Applied only if enforceNameRestrictions is true.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * Should duplicate prolicy names be allowed.\n   * Applied only if enforceNameRestrictions is true.\n   * @type {boolean}\n   */\n  let allowDuplicateNames = true;\n\n  /**\n   * A reference to a default policy, if created.\n   * @type {TrustedTypePolicy}\n   */\n  let defaultPolicy = null;\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameRestrictions = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n          {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScriptURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  // Common constants.\n  const emptyHTML = freeze(create(new TrustedHTML(creatorSymbol, '')));\n  privates(emptyHTML)['v'] = '';\n  const emptyScript = freeze(create(new TrustedScript(creatorSymbol, '')));\n  privates(emptyScript)['v'] = '';\n\n  /**\n   * A map of attribute / property names to allowed types\n   * for known namespaces.\n   * @type {!Object<string,!TrustedTypesTypeMap>}\n   * @export\n   */\n  const TYPE_MAP = {\n    [HTML_NS]: {\n      // TODO(koto): Figure out what to to with <link>\n      'EMBED': {\n        'attributes': {\n          'src': TrustedScriptURL.name,\n        },\n      },\n      'IFRAME': {\n        'attributes': {\n          'srcdoc': TrustedHTML.name,\n        },\n      },\n      'OBJECT': {\n        'attributes': {\n          'data': TrustedScriptURL.name,\n          'codebase': TrustedScriptURL.name,\n        },\n      },\n      // TODO(koto): Figure out what to do with portals.\n      'SCRIPT': {\n        'attributes': {\n          'src': TrustedScriptURL.name,\n          'text': TrustedScript.name,\n        },\n        'properties': {\n          'innerText': TrustedScript.name,\n          'textContent': TrustedScript.name,\n          'text': TrustedScript.name,\n        },\n      },\n      '*': {\n        'attributes': {},\n        'properties': {\n          'innerHTML': TrustedHTML.name,\n          'outerHTML': TrustedHTML.name,\n        },\n      },\n    },\n    [SVG_NS]: {\n      '*': {\n        'attributes': {},\n        'properties': {},\n      },\n    },\n  };\n\n  /**\n   * A map of element property to HTML attribute names.\n   * @type {!Object<string, string>}\n   */\n  const ATTR_PROPERTY_MAP = {\n    'codebase': 'codeBase',\n    'formaction': 'formAction',\n  };\n\n  // Edge doesn't support srcdoc.\n  if (isBrowser && !('srcdoc' in HTMLIFrameElement.prototype)) {\n    delete TYPE_MAP[HTML_NS]['IFRAME']['attributes']['srcdoc'];\n  }\n\n  // in HTML, clone attributes into properties.\n  for (const tag of Object.keys(TYPE_MAP[HTML_NS])) {\n    if (!TYPE_MAP[HTML_NS][tag]['properties']) {\n      TYPE_MAP[HTML_NS][tag]['properties'] = {};\n    }\n    for (const attr of Object.keys(TYPE_MAP[HTML_NS][tag]['attributes'])) {\n      TYPE_MAP[HTML_NS][tag]['properties'][\n          ATTR_PROPERTY_MAP[attr] ? ATTR_PROPERTY_MAP[attr] : attr\n      ] = TYPE_MAP[HTML_NS][tag]['attributes'][attr];\n    }\n  }\n\n  // Add inline event handlers attribute names.\n  for (const name of getUnsafeAttributeEventHandlers()) {\n    TYPE_MAP[HTML_NS]['*']['attributes'][name] = 'TrustedScript';\n    TYPE_MAP[SVG_NS]['*']['attributes'][name] = 'TrustedScript';\n  }\n\n  /**\n   * @type {!Object<string,!Function>}\n   */\n  const createTypeMapping = {\n    'createHTML': TrustedHTML,\n    'createScriptURL': TrustedScriptURL,\n    'createScript': TrustedScript,\n  };\n\n  const createFunctionAllowed = createTypeMapping.hasOwnProperty;\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypePolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName] || (\n        policyName == DEFAULT_POLICY_NAME ?\n            rejectInputDefaultPolicyFn : rejectInputFn\n      );\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s, ...args) {\n          // Trick to get methodName to show in stacktrace.\n          let result = method('' + s, ...args);\n          if (result === undefined || result === null) {\n            if (policyName == DEFAULT_POLICY_NAME) {\n              // These values mean that the input was rejected. This will cause\n              // a violation later, don't create types for them.\n              return result;\n            }\n            result = '';\n          }\n          const allowedValue = '' + result;\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = allowedValue;\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    const policy = create(TrustedTypePolicy.prototype);\n\n    for (const name of getOwnPropertyNames(createTypeMapping)) {\n      policy[name] = creator(createTypeMapping[name], name);\n    }\n    defineProperty(policy, 'name', {\n      value: policyName,\n      writable: false,\n      configurable: false,\n      enumerable: true,\n    });\n\n    return /** @type {!TrustedTypePolicy} */ (freeze(policy));\n  }\n\n  /**\n   * Returns the name of the trusted type required for a given element\n   *   attribute.\n   * @param {string} tagName The name of the tag of the element.\n   * @param {string} attribute The name of the attribute.\n   * @param {string=} elementNs Element namespace.\n   * @param {string=} attributeNs The attribute namespace.\n   * @return {string?} Required type name or null, if a Trusted\n   *   Type is not required.\n   */\n  function getAttributeType(tagName, attribute, elementNs = '',\n      attributeNs = '') {\n    const canonicalAttr = toLowerCase.apply(String(attribute));\n    return getTypeInternal_(tagName, 'attributes', canonicalAttr,\n        elementNs, attributeNs) || null;\n  }\n\n  /**\n   * Returns a type name from a type map.\n   * @param {string} tag A tag name.\n   * @param {string} container 'attributes' or 'properties'\n   * @param {string} name The attribute / property name.\n   * @param {string=} elNs Element namespace.\n   * @param {string=} attrNs Attribute namespace.\n   * @return {string|undefined}\n   * @private\n   */\n  function getTypeInternal_(tag, container, name, elNs = '', attrNs = '') {\n    const canonicalTag = toUpperCase.apply(String(tag));\n\n    let ns = attrNs ? attrNs : elNs;\n    if (!ns) {\n      ns = HTML_NS;\n    }\n    const map = hasOwnProperty.apply(TYPE_MAP, [ns]) ? TYPE_MAP[ns] : null;\n    if (!map) {\n      return;\n    }\n    if (hasOwnProperty.apply(map, [canonicalTag]) &&\n        map[canonicalTag] &&\n        hasOwnProperty.apply(map[canonicalTag][container], [name]) &&\n        map[canonicalTag][container][name]) {\n      return map[canonicalTag][container][name];\n    }\n\n    if (hasOwnProperty.apply(map, ['*']) &&\n        hasOwnProperty.apply(map['*'][container], [name]) &&\n        map['*'][container][name]) {\n      return map['*'][container][name];\n    }\n  }\n\n  /**\n   * Returns the name of the trusted type required for a given element property.\n   * @param {string} tagName The name of the tag of the element.\n   * @param {string} property The property.\n   * @param {string=} elementNs Element namespace.\n   * @return {string?} Required type name or null, if a Trusted\n   *   Type is not required.\n   */\n  function getPropertyType(tagName, property, elementNs = '') {\n    // TODO: Support namespaces.\n    return getTypeInternal_(\n        tagName, 'properties', String(property), elementNs) || null;\n  }\n\n  /**\n   * Returns the type map-like object, that resolves a name of a type for a\n   * given tag + attribute / property in a given namespace.\n   * The keys of the map are uppercase tag names. Map entry has mappings between\n   * a lowercase attribute name / case-sensitive property name and a name of the\n   * type that is required for that attribute / property.\n   * Example entry for 'IMG': {\"attributes\": {\"src\": \"TrustedHTML\"}}\n   * @param {string=} namespaceUri The namespace URI (will use the current\n   *   document namespace URI if omitted).\n   * @return {TrustedTypesTypeMap}\n   */\n  function getTypeMapping(namespaceUri = '') {\n    if (!namespaceUri) {\n      try {\n        namespaceUri = document.documentElement.namespaceURI;\n      } catch (e) {\n        namespaceUri = HTML_NS;\n      }\n    }\n    /**\n     * @template T\n     * @private\n     * @param {T} o\n     * @return {T}\n     */\n    function deepClone(o) {\n      return JSON.parse(JSON.stringify(o));\n    }\n    const map = TYPE_MAP[namespaceUri];\n    if (!map) {\n      return {};\n    }\n    return deepClone(map);\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the policy object.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {TrustedTypesInnerPolicy} policy Policy rules object.\n   * @return {TrustedTypePolicy} The policy that may create TT objects\n   *   according to the policy rules.\n   */\n  function createPolicy(name, policy) {\n    const pName = '' + name; // Assert it's a string\n\n    if (!pName.match(/^[-#a-zA-Z0-9=_/@.%]+$/g)) {\n      throw new TypeError('Policy ' + pName + ' contains invalid characters.');\n    }\n\n    if (enforceNameRestrictions && allowedNames.indexOf(pName) === -1 &&\n        allowedNames.indexOf('*') === -1) {\n      throw new TypeError('Policy ' + pName + ' disallowed.');\n    }\n\n    if (pName === DEFAULT_POLICY_NAME && defaultPolicy) {\n      throw new TypeError('Policy ' + pName + ' already exists.');\n    }\n    if (enforceNameRestrictions && !allowDuplicateNames &&\n        policyNames.indexOf(pName) !== -1) {\n      throw new TypeError('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if policy getters unwisely calls\n    // across protection domains to code that reenters this function,\n    // policy author still has rights to the name.\n    policyNames.push(pName);\n\n    // Only copy own properties of names present in createTypeMapping.\n    const innerPolicy = create(null);\n    if (policy && typeof policy === 'object') {\n      // Treat non-objects as empty policies.\n      for (const key of getOwnPropertyNames(policy)) {\n        if (createFunctionAllowed.call(createTypeMapping, key)) {\n          innerPolicy[key] = policy[key];\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('trustedTypes.createPolicy ' + pName +\n          ' was given an empty policy');\n    }\n    freeze(innerPolicy);\n\n    const wrappedPolicy = wrapPolicy(pName, innerPolicy);\n\n    if (pName === DEFAULT_POLICY_NAME) {\n      defaultPolicy = wrappedPolicy;\n    }\n\n    return wrappedPolicy;\n  }\n\n  /**\n   * Applies the policy name restrictions.\n   * @param {!Array<string>} allowedPolicyNames\n   * @param {boolean} allowDuplicates\n   */\n  function setPolicyNameRestrictions(allowedPolicyNames, allowDuplicates) {\n    enforceNameRestrictions = true;\n    allowedNames.length = 0;\n    forEach.call(allowedPolicyNames, (el) => {\n      push.call(allowedNames, '' + el);\n    });\n    allowDuplicateNames = allowDuplicates;\n    policyNames.length = 0; // Clear already used policy names list.\n  }\n\n  /**\n   * Clears the policy name restrictions.\n   */\n  function clearPolicyNameRestrictions() {\n    enforceNameRestrictions = false;\n  }\n\n  /**\n   * Returns the default policy, or null if it was not created.\n   * @return {TrustedTypePolicy}\n   */\n  function getDefaultPolicy() {\n    return defaultPolicy;\n  }\n\n  /**\n   * Resets the default policy.\n   */\n  function resetDefaultPolicy() {\n    defaultPolicy = null;\n    policyNames.splice(policyNames.indexOf(DEFAULT_POLICY_NAME), 1);\n  }\n\n  const api = create(TrustedTypePolicyFactory.prototype);\n  assign(api, {\n    // The main function to create policies.\n    createPolicy,\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    getAttributeType,\n    getPropertyType,\n    getTypeMapping,\n    emptyHTML,\n    emptyScript,\n    defaultPolicy, // Just to make the compiler happy, this is overridden below.\n\n    TrustedHTML: TrustedHTML,\n    TrustedScriptURL: TrustedScriptURL,\n    TrustedScript: TrustedScript,\n  });\n\n  defineProperty(api, 'defaultPolicy', {\n    get: getDefaultPolicy,\n    set: () => {},\n  });\n\n  return {\n    trustedTypes: freeze(api),\n    setPolicyNameRestrictions,\n    clearPolicyNameRestrictions,\n    getDefaultPolicy,\n    resetDefaultPolicy,\n  };\n};\n\n\nexport const {\n  trustedTypes,\n  setPolicyNameRestrictions,\n  clearPolicyNameRestrictions,\n  getDefaultPolicy,\n  resetDefaultPolicy,\n} = trustedTypesBuilderTestOnly();\n\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n// TrustedTypeConfig is used only as jsdoc type\n// eslint-disable-next-line\nimport {ENFORCEMENT_DIRECTIVE_NAME, TrustedTypeConfig}\n  from './data/trustedtypeconfig.js';\nimport {\n  trustedTypes as TrustedTypes,\n  setPolicyNameRestrictions,\n  clearPolicyNameRestrictions,\n  resetDefaultPolicy,\n  HTML_NS,\n} from\n  './trustedtypes.js';\n\nimport {installFunction, installSetter, installSetterAndGetter}\n  from './utils/wrapper.js';\n\nconst {apply} = Reflect;\nconst {\n  getOwnPropertyNames,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n} = Object;\n\nconst {\n  hasOwnProperty,\n  isPrototypeOf,\n} = Object.prototype;\n\nconst {slice} = String.prototype;\n\n// No URL in IE 11.\nconst UrlConstructor = typeof window.URL == 'function' ?\n    URL.prototype.constructor :\n    null;\n\nlet stringifyForRangeHack;\n\n/**\n * Return object constructor name\n * (their function.name is not available in IE 11).\n * @param {Function} fn\n * @return {string}\n * @private\n */\nconst getConstructorName_ = document.createElement('div').constructor.name ?\n    (fn) => fn.name :\n    (fn) => ('' + fn).match(/^\\[object (\\S+)\\]$/)[1];\n\n// In IE 11, insertAdjacent(HTML|Text) is on HTMLElement prototype\nconst insertAdjacentObject = apply(hasOwnProperty, Element.prototype,\n    ['insertAdjacentHTML']) ? Element.prototype : HTMLElement.prototype;\n\n// This is not available in release Firefox :(\n// https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent\n// https://bugzilla.mozilla.org/show_bug.cgi?id=1432523\nconst SecurityPolicyViolationEvent = window['SecurityPolicyViolationEvent'] ||\n  null;\n\n/**\n * Parses URL, catching all the errors.\n * @param  {string} url URL string to parse.\n * @return {URL|null}\n */\nfunction parseUrl_(url) {\n  try {\n    return new UrlConstructor(url, document.baseURI || undefined);\n  } catch (e) {\n    return null;\n  }\n}\n\n// We don't actually need other namespaces.\n// setAttribute is hooked on Element.prototype, which all elements inherit from,\n// and all sensitive property wrappers are hooked directly on Element as well.\nconst typeMap = TrustedTypes.getTypeMapping(HTML_NS);\n\nconst STRING_TO_TYPE = {\n  'TrustedHTML': TrustedTypes.TrustedHTML,\n  'TrustedScript': TrustedTypes.TrustedScript,\n  'TrustedScriptURL': TrustedTypes.TrustedScriptURL,\n};\n\n/**\n * Converts an uppercase tag name to an element constructor function name.\n * Used for property setter hijacking only.\n * @param {string} tagName\n * @return {string}\n */\nfunction convertTagToConstructor(tagName) {\n  if (tagName == '*') {\n    return 'HTMLElement';\n  }\n  return getConstructorName_(document.createElement(tagName).constructor);\n}\n\nfor (const tagName of Object.keys(typeMap)) {\n  const attrs = typeMap[tagName]['properties'];\n  for (const [k, v] of Object.entries(attrs)) {\n    attrs[k] = STRING_TO_TYPE[v];\n  }\n}\n\n/**\n * Map of type names to type checking function.\n * @type {!Object<string,!Function>}\n */\nconst TYPE_CHECKER_MAP = {\n  'TrustedHTML': TrustedTypes.isHTML,\n  'TrustedScriptURL': TrustedTypes.isScriptURL,\n  'TrustedScript': TrustedTypes.isScript,\n};\n\n/**\n * Map of type names to type producing function.\n * @type {Object<string,string>}\n */\nconst TYPE_PRODUCER_MAP = {\n  'TrustedHTML': 'createHTML',\n  'TrustedScriptURL': 'createScriptURL',\n  'TrustedScript': 'createScript',\n};\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypePolicy}\n * @property {function(string):TrustedHTML} createHTML\n * @property {function(string):TrustedScriptURL} createScriptURL\n * @property {function(string):TrustedScript} createScript\n */\nconst TrustedTypePolicy = {};\n/* eslint-enable no-unused-vars */\n\n\n/**\n * An object for enabling trusted type enforcement.\n */\nexport class TrustedTypesEnforcer {\n  /**\n   * @param {!TrustedTypeConfig} config The configuration for\n   * trusted type enforcement.\n   */\n  constructor(config) {\n    /**\n     * A configuration for the trusted type enforcement.\n     * @private {!TrustedTypeConfig}\n     */\n    this.config_ = config;\n    /**\n     * @private {Object<string, function(*): *|undefined>}\n     */\n    this.originalSetters_ = {};\n  }\n\n  /**\n   * Wraps HTML sinks with an enforcement setter, which will enforce\n   * trusted types and do logging, if enabled.\n   *\n   */\n  install() {\n    setPolicyNameRestrictions(this.config_.allowedPolicyNames,\n        this.config_.allowDuplicates);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    if ('ShadowRoot' in window) {\n      this.wrapSetter_(ShadowRoot.prototype, 'innerHTML',\n          TrustedTypes.TrustedHTML);\n    }\n    stringifyForRangeHack = (function(doc) {\n      // createRange is not supported by domino\n      // TODO: refactor feature testing with nodejs in mind\n      if (!doc.createRange) return false;\n      const r = doc.createRange();\n      // In IE 11 Range.createContextualFragment doesn't stringify its argument.\n      const f = r.createContextualFragment(/** @type {string} */ (\n        {toString: () => '<div></div>'}));\n      return f.childNodes.length == 0;\n    })(document);\n\n    if (typeof Range !== 'undefined') {\n      this.wrapWithEnforceFunction_(Range.prototype, 'createContextualFragment',\n          TrustedTypes.TrustedHTML, 0);\n    }\n\n    this.wrapWithEnforceFunction_(insertAdjacentObject,\n        'insertAdjacentHTML',\n        TrustedTypes.TrustedHTML, 1);\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      // Chrome\n      this.wrapWithEnforceFunction_(Document.prototype, 'write',\n          TrustedTypes.TrustedHTML, 0);\n    } else {\n      // Firefox\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'write',\n          TrustedTypes.TrustedHTML, 0);\n    }\n\n    if ('DOMParser' in window) {\n      this.wrapWithEnforceFunction_(DOMParser.prototype, 'parseFromString',\n          TrustedTypes.TrustedHTML, 0);\n    }\n\n    if (window.hasOwnProperty('setInterval')) {\n      this.wrapWithEnforceFunction_(window, 'setInterval',\n          TrustedTypes.TrustedScript, 0);\n    }\n    if (window.hasOwnProperty('setTimeout')) {\n      this.wrapWithEnforceFunction_(window, 'setTimeout',\n          TrustedTypes.TrustedScript, 0);\n    }\n    this.wrapSetAttribute_();\n    this.installScriptMutatorGuards_();\n    this.installPropertySetWrappers_();\n  }\n\n  /**\n   * Removes the original setters.\n   */\n  uninstall() {\n    clearPolicyNameRestrictions();\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    if ('ShadowRoot' in window) {\n      this.restoreSetter_(ShadowRoot.prototype, 'innerHTML');\n    }\n    // Range   is not supported by domino\n    // TODO: refactor feature testing with nodejs in mind\n    if (typeof Range !== 'undefined') {\n      this.restoreFunction_(Range.prototype, 'createContextualFragment');\n    }\n    this.restoreFunction_(insertAdjacentObject, 'insertAdjacentHTML');\n    this.restoreFunction_(Element.prototype, 'setAttribute');\n    this.restoreFunction_(Element.prototype, 'setAttributeNS');\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      this.restoreFunction_(Document.prototype, 'write');\n    } else {\n      this.restoreFunction_(HTMLDocument.prototype, 'write');\n    }\n\n    if ('DOMParser' in window) {\n      this.restoreFunction_(DOMParser.prototype, 'parseFromString');\n    }\n    this.restoreFunction_(window, 'setTimeout');\n    this.restoreFunction_(window, 'setInterval');\n    this.uninstallPropertySetWrappers_();\n    this.uninstallScriptMutatorGuards_();\n    resetDefaultPolicy();\n  }\n\n  /**\n   * Installs type-enforcing wrappers for APIs that allow to modify\n   * script element texts.\n   * @private\n   */\n  installScriptMutatorGuards_() {\n    const that = this;\n\n    ['appendChild', 'insertBefore', 'replaceChild'].forEach((fnName) => {\n      this.wrapFunction_(\n          Node.prototype,\n          fnName,\n          /**\n         * @this {Node}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n          function(originalFn, ...args) {\n            return that.enforceTypeInScriptNodes_\n                .bind(that, this, /* checkParent */ false, originalFn)\n                .apply(that, args);\n          });\n    });\n    this.wrapFunction_(\n        insertAdjacentObject,\n        'insertAdjacentText',\n        /**\n         * @this {Element}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.insertAdjacentTextWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n\n    if ('after' in Element.prototype) {\n      ['after', 'before', 'replaceWith'].forEach((fnName) => {\n        this.wrapFunction_(\n            Element.prototype,\n            fnName,\n            /**\n           * @this {Element}\n           * @param {function(!Function, ...*)} originalFn\n           * @return {*}\n           */\n            function(originalFn, ...args) {\n              return that.enforceTypeInScriptNodes_\n                  .bind(that, this, /* checkParent */ true, originalFn)\n                  .apply(that, args);\n            });\n      });\n      ['append', 'prepend'].forEach((fnName) => {\n        this.wrapFunction_(\n            Element.prototype,\n            fnName,\n            /**\n           * @this {Element}\n           * @param {function(!Function, ...*)} originalFn\n           * @return {*}\n           */\n            function(originalFn, ...args) {\n              return that.enforceTypeInScriptNodes_\n                  .bind(that, this, /* checkParent */ false, originalFn)\n                  .apply(that, args);\n            });\n      });\n    }\n  }\n\n  /**\n   * Uninstalls type-enforcing wrappers for APIs that allow to modify\n   * script element texts.\n   * @private\n   */\n  uninstallScriptMutatorGuards_() {\n    this.restoreFunction_(Node.prototype, 'appendChild');\n    this.restoreFunction_(Node.prototype, 'insertBefore');\n    this.restoreFunction_(Node.prototype, 'replaceChild');\n    this.restoreFunction_(insertAdjacentObject, 'insertAdjacentText');\n    if ('after' in Element.prototype) {\n      ['after', 'before', 'replaceWith', 'append', 'prepend'].forEach(\n          (fnName) => this.restoreFunction_(Element.prototype, fnName));\n    }\n  }\n\n  /**\n   * Installs wrappers for directly setting properties\n   * based on the type map.\n   * @private\n   */\n  installPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (const tag of getOwnPropertyNames(typeMap)) {\n      for (const property of getOwnPropertyNames(typeMap[tag]['properties'])) {\n        this.wrapSetter_(\n            window[convertTagToConstructor(tag)].prototype,\n            property,\n            typeMap[tag]['properties'][property]);\n      }\n    }\n  }\n\n  /**\n   * Uninstalls wrappers for directly setting properties\n   * based on the type map.\n   * @private\n   */\n  uninstallPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (const tag of getOwnPropertyNames(typeMap)) {\n      for (const property of getOwnPropertyNames(typeMap[tag]['properties'])) {\n        this.restoreSetter_(\n            window[convertTagToConstructor(tag)].prototype,\n            property);\n      }\n    }\n  }\n\n  /** Wraps set attribute with an enforcement function. */\n  wrapSetAttribute_() {\n    const that = this;\n    this.wrapFunction_(\n        Element.prototype,\n        'setAttribute',\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n    this.wrapFunction_(\n        Element.prototype,\n        'setAttributeNS',\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeNSWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttribute.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttribute function.\n   * @return {*}\n   */\n  setAttributeWrapper_(context, originalFn, ...args) {\n    // Note(slekies): In a normal application constructor should never be null.\n    // However, there are no guarantees. If the constructor is null, we cannot\n    // determine whether a special type is required. In order to not break the\n    // application, we will not do any further type checks and pass the call\n    // to setAttribute.\n    if (context.constructor !== null && context instanceof Element) {\n      const attrName = (args[0] = String(args[0])).toLowerCase();\n      const requiredType = TrustedTypes.getAttributeType(context.tagName,\n          attrName, context.namespaceURI);\n      if (requiredType && apply(hasOwnProperty, STRING_TO_TYPE,\n          [requiredType])) {\n        return this.enforce_(\n            context, 'setAttribute', STRING_TO_TYPE[requiredType],\n            originalFn, 1, args);\n      }\n    }\n    return apply(originalFn, context, args);\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttributeNS.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttributeNS function.\n   * @return {*}\n   */\n  setAttributeNSWrapper_(context, originalFn, ...args) {\n    // See the note from setAttributeWrapper_ above.\n    if (context.constructor !== null && context instanceof Element) {\n      const ns = args[0] ? String(args[0]) : null;\n      args[0] = ns;\n      const attrName = (args[1] = String(args[1])).toLowerCase();\n      const requiredType = TrustedTypes.getAttributeType(context.tagName,\n          attrName, context.namespaceURI, ns);\n      if (requiredType && apply(hasOwnProperty, STRING_TO_TYPE,\n          [requiredType])) {\n        return this.enforce_(context, 'setAttributeNS',\n            STRING_TO_TYPE[requiredType],\n            originalFn, 2, args);\n      }\n    }\n    return apply(originalFn, context, args);\n  }\n\n  /**\n   * Wrapper for DOM mutator functions that enforces type checks if the context\n   * (or, optionally, its parent node) is a script node.\n   * For each argument, it will make sure that text nodes pass through a\n   * default policy, or generate a violation. To skip that check, pass\n   * TrustedScript objects instead.\n   * @param {!Element|!Node} context The context for the call to the original\n   * function.\n   * @param {boolean} checkParent Check parent of context instead.\n   * @param {!Function} originalFn The original mutator function.\n   * @return {*}\n   */\n  enforceTypeInScriptNodes_(context, checkParent, originalFn, ...args) {\n    const objToCheck = checkParent ? context.parentNode : context;\n    if (objToCheck instanceof HTMLScriptElement && args.length > 0) {\n      for (let argNumber = 0; argNumber < args.length; argNumber++) {\n        let arg = args[argNumber];\n        if (arg instanceof Node && arg.nodeType !== Node.TEXT_NODE) {\n          continue; // Type is not interesting\n        }\n        if (arg instanceof Node && arg.nodeType == Node.TEXT_NODE) {\n          arg = arg.textContent;\n        } else if (TrustedTypes.isScript(arg)) {\n          // TODO(koto): Consider removing this branch, as it's hard to spec.\n          // Convert to text node and go on.\n          args[argNumber] = document.createTextNode('' + arg);\n          continue;\n        }\n\n        // Try to run a default policy on argsthe argument\n        const fallbackValue = this.maybeCallDefaultPolicy_(\n            'TrustedScript', '' + arg, 'script.text');\n        if (fallbackValue === null || fallbackValue === undefined) {\n          this.processViolation_(context, originalFn.name,\n              TrustedTypes.TrustedScript, arg);\n        } else {\n          arg = fallbackValue;\n        }\n        args[argNumber] = document.createTextNode('' + arg);\n      }\n    }\n    return apply(originalFn, context, args);\n  }\n\n  /**\n   * Wrapper for Element.insertAdjacentText that enforces type checks for\n   * inserting text into a script node.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original insertAdjacentText function.\n   */\n  insertAdjacentTextWrapper_(context, originalFn, ...args) {\n    const riskyPositions = ['beforebegin', 'afterend'];\n    if (context instanceof Element &&\n        context.parentElement instanceof HTMLScriptElement &&\n        args.length > 1 &&\n        riskyPositions.includes(args[0]) &&\n        !(TrustedTypes.isScript(args[1]))) {\n      // Run a default policy on args[1]\n      args[1] = '' + args[1];\n      const fallbackValue = this.maybeCallDefaultPolicy_('TrustedScript',\n          args[1], 'script.text');\n      if (fallbackValue === null || fallbackValue === undefined) {\n        this.processViolation_(context, 'insertAdjacentText',\n            TrustedTypes.TrustedScript, args[1]);\n      } else {\n        args[1] = fallbackValue;\n      }\n\n      const textNode = document.createTextNode('' + args[1]);\n\n\n      const insertBefore = /** @type function(this: Node) */(\n        this.originalSetters_[this.getKey_(Node.prototype, 'insertBefore')]);\n\n      switch (args[0]) {\n        case riskyPositions[0]: // 'beforebegin'\n          apply(insertBefore, context.parentElement,\n              [textNode, context]);\n          break;\n        case riskyPositions[1]: // 'afterend'\n          apply(insertBefore, context.parentElement,\n              [textNode, context.nextSibling]);\n          break;\n      }\n      return;\n    }\n    apply(originalFn, context, args);\n  }\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {number} argNumber Number of the argument to enforce the type of.\n   * @private\n   */\n  wrapWithEnforceFunction_(object, name, type, argNumber) {\n    const that = this;\n    this.wrapFunction_(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.enforce_.call(that, this, name, type, originalFn,\n              argNumber, args);\n        });\n  }\n\n\n  /**\n   * Wraps an existing function with a given function body and stores the\n   * original function.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {function(!Function, ...*)} functionBody The wrapper function.\n   */\n  wrapFunction_(object, name, functionBody) {\n    const descriptor = getOwnPropertyDescriptor(object, name);\n    const originalFn = /** @type function(*):* */ (\n        descriptor ? descriptor.value : null);\n\n    if (!(originalFn instanceof Function)) {\n      // eslint-disable-next-line no-console\n      console.log(\n          'Property ' + name + ' on object' + object + ' is not a function');\n      return;\n    }\n\n    const key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error(\n          `TrustedTypesEnforcer: Double installation detected: ${key} ${name}`);\n    }\n    installFunction(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @return {*}\n         */\n        function(...args) {\n          return functionBody.bind(this, originalFn).apply(this, args);\n        });\n    this.originalSetters_[key] = originalFn;\n  }\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {!Object=} descriptorObject If present, will reuse the\n   *   setter/getter from this one, instead of object. Used for redefining\n   *   setters in subclasses.\n   * @private\n   */\n  wrapSetter_(object, name, type, descriptorObject = undefined) {\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n\n    let useObject = descriptorObject || object;\n    let descriptor;\n    let originalSetter;\n    const stopAt = getPrototypeOf(Node.prototype);\n\n    // Find the descriptor on the object or its prototypes, stopping at Node.\n    do {\n      descriptor = getOwnPropertyDescriptor(useObject, name);\n      originalSetter = /** @type {function(*):*} */ (descriptor ?\n          descriptor.set : null);\n      if (!originalSetter) {\n        useObject = getPrototypeOf(useObject) || stopAt;\n      }\n    } while (!(originalSetter || useObject === stopAt || !useObject));\n\n    // if there is no setter warn and return\n    // (some setters might not be available in certain environments, e.g. node)\n    if (!(originalSetter instanceof Function)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n          'No setter for property ' + name + ' on object' + object);\n      return;\n    }\n\n    const key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error(\n          `TrustedTypesEnforcer: Double installation detected: ${key} ${name}`);\n    }\n    const that = this;\n    /**\n     * @this {TrustedTypesEnforcer}\n     * @param {*} value\n     */\n    const enforcingSetter = function(value) {\n      that.enforce_.call(that, this, name, type, originalSetter, 0,\n          [value]);\n    };\n\n    if (useObject === object) {\n      installSetter(\n          object,\n          name,\n          enforcingSetter);\n    } else {\n      // Since we're creating a new setter in subclass, we also need to\n      // overwrite the getter.\n      installSetterAndGetter(\n          object,\n          name,\n          enforcingSetter,\n          descriptor.get\n      );\n    }\n    this.originalSetters_[key] = originalSetter;\n  }\n\n  /**\n   * Restores the original setter for the property, as encountered during\n   * install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Object=} descriptorObject If present, will restore the original\n   *   setter/getter from this one, instead of object.\n   * @private\n   */\n  restoreSetter_(object, name, descriptorObject = undefined) {\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n\n    let useObject = descriptorObject || object;\n    let descriptor;\n    let originalSetter;\n    const stopAt = getPrototypeOf(Node.prototype);\n\n    // Find the descriptor on the object or its prototypes, stopping at Node.\n    do {\n      descriptor = getOwnPropertyDescriptor(useObject, name);\n      originalSetter = /** @type {function(*):*} */ (descriptor ?\n          descriptor.set : null);\n      if (!originalSetter) {\n        useObject = getPrototypeOf(useObject) || stopAt;\n      }\n    } while (!(originalSetter || useObject === stopAt || !useObject));\n\n    // if there is no setter warn and return\n    // (some setters might not be available in certain environments, e.g. node)\n    if (!(originalSetter instanceof Function)) {\n      // eslint-disable-next-line no-console\n      console.warn(\n          'No setter for property ' + name + ' on object' + object);\n      return;\n    }\n\n    const key = this.getKey_(object, name);\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          // eslint-disable-next-line max-len\n          `TrustedTypesEnforcer: Cannot restore (double uninstallation?): ${key} ${name}`\n      );\n    }\n    if (descriptorObject) {\n      // We have to also overwrite a getter.\n      installSetterAndGetter(object, name, this.originalSetters_[key],\n          getOwnPropertyDescriptor(descriptorObject, name).get);\n    } else {\n      installSetter(object, name, this.originalSetters_[key]);\n    }\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Restores the original method of an object, as encountered during install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @private\n   */\n  restoreFunction_(object, name) {\n    const descriptor = getOwnPropertyDescriptor(object, name);\n    const originalFn = /** @type function(*):* */ (\n        descriptor ? descriptor.value : null);\n\n    if (!(originalFn instanceof Function)) {\n      // eslint-disable-next-line no-console\n      console.log(\n          'Property ' + name + ' on object' + object + ' is not a function');\n      return;\n    }\n\n    const key = this.getKey_(object, name);\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          // eslint-disable-next-line max-len\n          `TrustedTypesEnforcer: Cannot restore (double uninstallation?): ${key} ${name}`\n      );\n    }\n    installFunction(object, name, this.originalSetters_[key]);\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Returns the key name for caching original setters.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @return {string} Key name.\n   * @private\n   */\n  getKey_(object, name) {\n    // TODO(msamuel): Can we use Object.prototype.toString.call(object)\n    // to get an unspoofable string here?\n    // TODO(msamuel): fail on '-' in object.constructor.name?\n    // No Function.name in IE 11\n    const ctrName = '' + (\n      object.constructor.name ?\n      object.constructor.name :\n      object.constructor);\n    return ctrName + '-' + name;\n  }\n\n  /**\n   * Calls a default policy.\n   * @param {string} typeName Type name to attempt to produce from a value.\n   * @param {*} value The value to pass to a default policy\n   * @param {string} sink The sink name that the default policy will be called\n   *   with.\n   * @throws {Error} If the default policy throws, or not exist.\n   * @return {Function?} The trusted value or null, if the input value shoudl\n   *   be rejected.\n   */\n  maybeCallDefaultPolicy_(typeName, value, sink = '') {\n    // Apply a fallback policy, if it exists.\n    const fallbackPolicy = TrustedTypes['defaultPolicy'];\n    if (!fallbackPolicy) {\n      return null;\n    }\n    if (!TYPE_CHECKER_MAP.hasOwnProperty(typeName)) {\n      return null;\n    }\n    return fallbackPolicy[TYPE_PRODUCER_MAP[typeName]](value, '' + sink);\n  }\n\n  /**\n   * Logs and enforces TrustedTypes depending on the given configuration.\n   * @template T\n   * @param {!Object} context The object that the setter is called for.\n   * @param {string} propertyName The name of the property.\n   * @param {!Function} typeToEnforce The type to enforce.\n   * @param {function(?):T} originalSetter Original setter.\n   * @param {number} argNumber Number of argument to enforce the type of.\n   * @param {Array} args Arguments.\n   * @return {T}\n   * @private\n   */\n  enforce_(context, propertyName, typeToEnforce, originalSetter, argNumber,\n      args) {\n    const value = args[argNumber];\n    const typeName = '' + typeToEnforce.name;\n    // If typed value is given, pass through.\n    if (TYPE_CHECKER_MAP.hasOwnProperty(typeName) &&\n        TYPE_CHECKER_MAP[typeName](value)) {\n      if (stringifyForRangeHack &&\n            propertyName == 'createContextualFragment') {\n        // IE 11 hack, somehow the value is not stringified implicitly.\n        args[argNumber] = args[argNumber].toString();\n      }\n      return apply(originalSetter, context, args);\n    }\n\n    if (typeToEnforce === TrustedTypes.TrustedScript) {\n      const isInlineEventHandler =\n          propertyName == 'setAttribute' ||\n          propertyName === 'setAttributeNS' ||\n          apply(slice, propertyName, [0, 2]) === 'on';\n      // If a function (instead of string) is passed to inline event attribute,\n      // or set(Timeout|Interval), pass through.\n      const propertyAcceptsFunctions =\n          propertyName === 'setInterval' ||\n          propertyName === 'setTimeout' ||\n          isInlineEventHandler;\n      if ((propertyAcceptsFunctions && typeof value === 'function') ||\n          (isInlineEventHandler && value === null)) {\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    // Apply a fallback policy, if it exists.\n    args[argNumber] = '' + value;\n    const objName = context instanceof Element ?\n        context.localName :\n        getConstructorName_(context ? context.constructor : window.constructor);\n    const fallbackValue = this.maybeCallDefaultPolicy_(\n        typeName, value, objName + '.' + propertyName);\n    if (fallbackValue === null || fallbackValue === undefined) {\n      // This will throw a TypeError if enforcement is enabled.\n      this.processViolation_(context, propertyName, typeToEnforce, value);\n    } else {\n      // Use the value modified by the default policy.\n      args[argNumber] = fallbackValue;\n    }\n    return apply(originalSetter, context, args);\n  }\n\n  /**\n   * Report a TT violation.\n   * @param {!Object} context The object that the setter is called for.\n   * @param {string} propertyName The name of the property.\n   * @param {!Function} typeToEnforce The type to enforce.\n   * @param {string} value The value that was violated the restrictions.\n   * @throws {TypeError} if the enforcement is enabled.\n   */\n  processViolation_(context, propertyName, typeToEnforce, value) {\n    const contextName = getConstructorName_(context.constructor) ||\n        '' + context;\n    const message = `Failed to set ${propertyName} on ${contextName}: `\n        + `This property requires ${typeToEnforce.name}.`;\n\n    if (this.config_.isLoggingEnabled) {\n      // eslint-disable-next-line no-console\n      console.warn(message, propertyName, context, typeToEnforce, value);\n    }\n\n    // Unconditionally dispatch an event.\n    if (typeof SecurityPolicyViolationEvent == 'function') {\n      let blockedURI = '';\n      if (typeToEnforce === TrustedTypes.TrustedScriptURL) {\n        blockedURI = parseUrl_(value) || '';\n        if (blockedURI) {\n          blockedURI = blockedURI.href;\n        }\n      }\n      const valueSlice = apply(slice, '' + value, [0, 40]);\n      const event = new SecurityPolicyViolationEvent(\n          'securitypolicyviolation',\n          {\n            'bubbles': true,\n            'blockedURI': blockedURI,\n            'disposition': this.config_.isEnforcementEnabled ?\n              'enforce' : 'report',\n            'documentURI': document.location.href,\n            'effectiveDirective': ENFORCEMENT_DIRECTIVE_NAME,\n            'originalPolicy': this.config_.cspString,\n            'statusCode': 0,\n            'violatedDirective': ENFORCEMENT_DIRECTIVE_NAME,\n            'sample': `${contextName}.${propertyName} ${valueSlice}`,\n          });\n      if (context instanceof Node && context.isConnected) {\n        context.dispatchEvent(event);\n      } else { // Fallback - dispatch an event on base document.\n        document.dispatchEvent(event);\n      }\n    }\n\n    if (this.config_.isEnforcementEnabled) {\n      throw new TypeError(message);\n    }\n  }\n}\n"]}